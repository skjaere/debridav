import com.google.cloud.tools.jib.gradle.JibTask
import io.gitlab.arturbosch.detekt.Detekt
import io.gitlab.arturbosch.detekt.DetektCreateBaselineTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat


/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

group = "io.skjaere"
version = "0.1.0"
description = "DebriDav"

plugins {
    `java-library`
    `maven-publish`
    jacoco
    application
    kotlin("jvm") version "2.0.10"
    kotlin("plugin.serialization") version "2.0.10"
    kotlin("plugin.spring") version "2.0.10"
    id("io.gitlab.arturbosch.detekt") version "1.23.7"
    id("org.springframework.boot") version "3.3.5"
    id("com.google.cloud.tools.jib") version "3.4.4"
    id("io.github.simonhauck.release") version "1.3.0"

}

apply(plugin = "io.spring.dependency-management")

application {
    mainClass = "io.skjaere.debridav.DebriDavApplicationKt"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap")
    }

    maven {
        url = uri("https://repo.maven.apache.org/maven2/")
    }
}

tasks.withType<Detekt>().configureEach {
    jvmTarget = "21"
}
tasks.withType<DetektCreateBaselineTask>().configureEach {
    jvmTarget = "21"
}

detekt {
    buildUponDefaultConfig = true // preconfigure defaults
    allRules = false // activate all available (even unstable) rules.
    baseline = file("$projectDir/config/baseline.xml") // a way of suppressing issues before introducing detekt
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
}

dependencies {
    api(libs.org.springframework.boot.spring.boot.starter.web)
    api(libs.com.fasterxml.jackson.module.jackson.module.kotlin)
    api(libs.org.jetbrains.kotlin.kotlin.reflect)
    api(libs.org.jetbrains.kotlin.kotlin.stdlib)
    api(libs.io.milton.milton.server.ce)
    api(libs.org.springframework.boot.spring.boot.starter.data.jpa)
    api(libs.org.postgresql.postgresql)
    api(libs.org.springframework.boot.spring.boot.starter.webflux)
    api(libs.org.jetbrains.kotlinx.kotlinx.coroutines.core)
    api(libs.com.google.guava.guava)
    api(libs.org.apache.httpcomponents.httpcore)
    api(libs.io.ktor.ktor.client.core.jvm)
    api(libs.io.ktor.ktor.client.content.negotiation.jvm)
    api(libs.io.ktor.ktor.serialization.kotlinx.json.jvm)
    api(libs.io.ktor.ktor.client.cio.jvm)
    api(libs.org.jetbrains.kotlinx.kotlinx.coroutines.test)
    api(libs.org.jetbrains.kotlinx.kotlinx.serialization.json.jvm)
    runtimeOnly(libs.com.h2database.h2)
    implementation("org.jetbrains.kotlin:kotlin-test:2.0.21")
    implementation("org.slf4j:slf4j-api:2.0.16")
    implementation("org.slf4j:jul-to-slf4j:2.0.16")
    implementation("com.github.krupt:spring-boot-starter-jsonrpc:1.1.0")
    testImplementation(libs.org.springframework.boot.spring.boot.starter.test)
    testImplementation(libs.org.mock.server.mockserver.netty.no.dependencies)
    testImplementation(libs.org.jetbrains.kotlin.kotlin.test)
    testImplementation(libs.org.mockito.kotlin.mockito.kotlin) // TODO: remove
    testImplementation(libs.io.mockk.mockk.jvm)
    testImplementation(libs.io.mockk.mockk)
}


java.sourceCompatibility = JavaVersion.VERSION_21

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
publishing {
    publications.create<MavenPublication>("maven") {
        from(components["java"])
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.withType<Test>() {
    finalizedBy(tasks.jacocoTestReport)
    useJUnitPlatform {
        includeEngines("junit-jupiter", "spek2")
    }

    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        events("passed", "failed", "skipped")
    }
}

configurations {
    compileOnly {
        extendsFrom(configurations.annotationProcessor.get())
    }
}

tasks.named<Test>("test") {
    useJUnitPlatform()

    testLogging {
        events("passed")
    }
}
tasks.withType<JibTask>().configureEach {
    notCompatibleWithConfigurationCache("because https://github.com/GoogleContainerTools/jib/issues/3132")
}
jib {
    to {
        image = "ghcr.io/skjaere/debridav"
        auth {
            username = "skjaere"
            password = System.getenv("GHCR_TOKEN")
        }
    }

}